/*
 날짜 : 2025/07/15
 이름 : 박효빈
 내용 : 3장 SQL 고급

*/

-- 실습하기 3-1 : 테이블 생성 및 데이터 입력 
CREATE TABLE EMP (
EMPNO NUMBER(4) PRIMARY KEY,
NAME VARCHAR2(10) NOT NULL,
GENDER CHAR(1) NOT NULL,
JOB CHAR(10) NOT NULL,
DEPNO NUMBER(2) DEFAULT NULL,
REGDATE DATE NOT NULL
);

CREATE TABLE DEPT (
DEPTNO NUMBER(2) PRIMARY KEY,
DNAME VARCHAR2(10) NOT NULL,
DTEL VARCHAR(12) NOT NULL
);

CREATE TABLE SALE (
NO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
EMPNO NUMBER(4) NOT NULL,
YEAR NUMBER(4) NOT NULL,
MONTH NUMBER(2) NOT NULL,
PRICE NUMBER(10)
);

//직원 테이블 입력
INSERT INTO EMP VALUES (1001, '김유신', 'M', '사원', 10, SYSDATE);
INSERT INTO EMP VALUES (1002, '김춘추', 'M', '대리', 20, SYSDATE);
INSERT INTO EMP VALUES (1003, '장보고', 'M', '과장', 10, SYSDATE);
INSERT INTO EMP VALUES (1004, '강감찬', 'M', '부장', 30, SYSDATE);
INSERT INTO EMP VALUES (1005, '신사임', 'F', '대리', 20, SYSDATE);
INSERT INTO EMP VALUES (1006, '이황', 'M', '사원', 40, SYSDATE);
INSERT INTO EMP VALUES (1007, '이이', 'M', '과장', 20, SYSDATE);
INSERT INTO EMP VALUES (1008, '이순신', 'M', '사원', NULL, SYSDATE);
INSERT INTO EMP VALUES (1009, '허난설헌', 'F', '사원', NULL, SYSDATE);
INSERT INTO EMP VALUES (1010, '정약용', 'M', '대리', 50, SYSDATE);

//부서 테이블 입력
INSERT INTO DEPT (DEPTNO, DNAME, DTEL) VALUES (10, '영업1부', '051-511-1000');
INSERT INTO DEPT (DEPTNO, DNAME, DTEL) VALUES (20, '영업2부', '051-511-2000');
INSERT INTO DEPT (DEPTNO, DNAME, DTEL) VALUES (30, '영업3부', '051-511-3000');
INSERT INTO DEPT (DEPTNO, DNAME, DTEL) VALUES (40, '영업4부', '051-511-4000');
INSERT INTO DEPT (DEPTNO, DNAME, DTEL) VALUES (50, '영업지원부', '051-511-5000');

//매출 테이블 입력
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1001, 2023, 1, 98100);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1002, 2023, 1, 136000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1003, 2023, 1, 80000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1004, 2023, 1, 78000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1005, 2023, 1, NULL);

INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1001, 2023, 2, 23500);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1002, 2023, 2, 126000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1003, 2023, 2, 18500);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1005, 2023, 2, 19000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1010, 2023, 2, 53000);

INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1001, 2024, 1, 24000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1002, 2024, 1, 109000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1003, 2024, 1, 80000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1004, 2024, 1, NULL);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1007, 2024, 1, 24000);

INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1002, 2024, 2, 160000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1003, 2024, 2, 101000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1004, 2024, 2, 43000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1005, 2024, 2, 24000);
INSERT INTO SALE (EMPNO, YEAR, MONTH,PRICE) VALUES (1006, 2024, 2, 109000);

//실습하기 2-1 
SELECT * FROM EMP WHERE name <> '김춘추';
SELECT * FROM EMP WHERE job IN ('사원', '대리'); -- IN : JOB에서 사원과 대리인 데이터 조회
SELECT * FROM EMP WHERE name LIKE '김%'; -- 와일드문자 김으로 시작하는 모든 이름 검색
SELECT * FROM EMP WHERE name LIKE '%신';
SELECT * FROM EMP WHERE NAME LIKE '이_'; -- _하나당 문자하나 
SELECT * FROM EMP WHERE NAME LIKE '이__'; -- _하나당 문자하나 
SELECT * FROM EMP WHERE name LIKE '_순%';

SELECT * FROM EMP WHERE name = '김유신';
SELECT * FROM EMP WHERE JOB = '차장' AND depno = 101;
SELECT * FROM EMP WHERE JOB = '차장' OR DEPNO = 101;
SELECT * FROM EMP WHERE NAME != '김춘추';
SELECT * FROM EMP WHERE NAME <> '김춘추';
SELECT * FROM EMP WHERE JOB='사원' AND DEPNO =10;
SELECT * FROM EMP WHERE JOB ='사원' OR JOB ='대리';
SELECT * FROM EMP WHERE JOB IN ('사원','대리');
SELECT * FROM EMP WHERE DEPNO IN (101,102,103); //X
SELECT * FROM EMP WHERE name LIKE '김%';
SELECT * FROM EMP WHERE name LIKE '%신';
SELECT * FROM EMP WHERE name LIKE '김__';
SELECT * FROM EMP WHERE name LIKE '이__';
SELECT * FROM EMP WHERE DEPNO IS NULL;
SELECT * FROM EMP WHERE DEPNO IS NOT NULL;
SELECT * FROM EMP WHERE EMPNO >= 1005;
SELECT * FROM DEPT WHERE DEPTNO = 10;
SELECT * FROM DEPT WHERE DNAME = '영업지원부';
SELECT * FROM DEPT WHERE DTEL LIKE '%30%';
SELECT * FROM DEPT WHERE DEPTNO IN (10,30);

// 정렬과 제한

SELECT * FROM SALE ORDER BY PRICE;
SELECT * FROM SALE ORDER BY PRICE ASC;
SELECT * FROM SALE ORDER BY PRICE DESC;

SELECT * FROM EMP ORDER BY name;
SELECT * FROM EMP ORDER BY NAME DESC;
SELECT * FROM EMP ORDER BY regdate ASC; 

SELECT * FROM SALE WHERE PRICE > 50000 ORDER BY PRICE DESC; --5만원 이상 내림차순 정렬
SELECT * FROM SALE WHERE PRICE > 50000
ORDER BY YEAR DESC, MONTH, PRICE DESC; -- 년도는 오름차순(기본) 월(오름차순) 금액 내림차순

SELECT * FROM SALE FETCH FIRST 3 ROWS ONLY; -- 매출 테이블에서 처음부터 3개까지만
SELECT * FROM SALE OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY; -- 위와 같은 INDEX 번호 0~3까지
SELECT * FROM SALE OFFSET 1 ROWS FETCH NEXT 2 ROWS ONLY;
SELECT * FROM SALE OFFSET 5 ROWS FETCH NEXT 3 ROWS ONLY;
SELECT * FROM SALE
WHERE PRICE < 50000
ORDER BY price DESC
FETCH FIRST 3 ROWS ONLY;

SELECT * FROM SALE
WHERE PRICE > 50000
ORDER BY YEAR DESC, MONTH, PRICE DESC
FETCH FIRST 5 ROWS ONLY;

// 중복제거와 별칭
SELECT DISTINCT DEPNO FROM EMP;
SELECT DISTINCT JOB, DEPNO FROM EMP;
SELECT EMPNO AS 사번, NAME AS 이름, GENDER "성 별" FROM EMP; -- AS 생략 가능 "" << 공백 문자 추가 가능
SELECT EMPNO E, NAME N, GENDER G FROM EMP;

-- 실습하기 3-1 다양한 SQL 숫자 함수 실습

SELECT SUM(PRICE) AS 합계 FROM SALE;
SELECT COUNT(*) AS 직원수 FROM EMP;
SELECT COUNT(EMPNO) AS 직원수 FROM EMP;
SELECT COUNT(DEPNO) AS 부서수 FROM EMP;

SELECT FLOOR(1.2) FROM DUAL;  --더미테이블
SELECT ROUND(1.2) FROM DUAL;
SELECT ROUND(1.8) FROM DUAL;
SELECT DBMS_RANDOM.VALUE FROM DUAL; -- 0~1 사이의 실수
SELECT CEIL(DBMS_RANDOM.VALUE*10) FROM DUAL;

SELECT SUM(PRICE) AS 합계 FROM Sale;
SELECT AVG(PRICE) AS 평균 FROM SALE;
SELECT MAX(PRICE) AS "최대값" FROM SALE;
SELECT MIN(PRICE) AS "최소값" FROM SALE;
SELECT COUNT(*) AS 직원수 FROM EMP;
SELECT COUNT(JOB) AS "정직원 수" FROM EMP;

-- 3-2 문자함수실습
SELECT 'HELLO ORACLE!', LENGTH('HELLO ORACLE') FROM DUAL;
SELECT 'HELLO ORACLE!',
    SUBSTR('HELLO ORACLE!',1,3),
    SUBSTR('HELLO ORACLE!',3,2),
    SUBSTR('HELLO ORACLE!',5) FROM DUAL; --5번째부터 마지막까지
SELECT
    INSTR('HELLO ORACLE!','L') AS INSTR_1,
    INSTR('HELLO ORACLE!','L',-1) AS INSTR_2 --뒤에서부터 찾음

    FROM DUAL;
    
    SELECT '010-1234-5678', REPLACE('010-1234-5670','-','') FROM DUAL;
    SELECT LPAD('Oraaaal',10,'#') as LPAD, rPAD('ORACLE',10,'*') AS RPAD FROM DUAL;
    
SELECT
'[_Oracle_]' AS BEFORE,
'[' || TRIM('_Oracle_')||']' as TRIMED FROM DUAL;

-- SYSDATE - 현재 시간 데이터
SELECT 
    SYSDATE,
    SYSDATE -1,
    SYSDATE +1
    FROM DUAL;
    
SELECT 
 ADD_MONTHS(SYSDATE,1),
 ADD_MONTHS(SYSDATE,-1)
 FROM DUAL;
 
 SELECT MONTHS_BETWEEN(DATE '2025-07-13', DATE '2024-07-13') AS 개월차 FROM DUAL;
 
 SELECT NEXT_DAY(SYSDATE,'월요일') AS 다음_월요일 FROM DUAL;
 
 -- 3-4 기타함수실습
// TO_CHAR : 날짜데이터를문자데이터로변환 
SELECT
 TO_CHAR(SYSDATE, 'YYYY')  AS YYYY, --G 현재 시간 데이터
 TO_CHAR(SYSDATE, 'MM')    AS MM,
 TO_CHAR(SYSDATE, 'DD')    AS DD,
 TO_CHAR(SYSDATE, 'HH24')  AS HH24,
 TO_CHAR(SYSDATE, 'MI')    AS MI,
 TO_CHAR(SYSDATE, 'SS')    AS SS,
 TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS 날짜시간
FROM DUAL;

INSERT INTO EMP VALUES (1011,'안중근','M','부장',30,TO_CHAR(SYSDATE, 'YYYY/MM/DD'));

 // TO_DATE : 문자데이터를날짜데이터로변환
SELECT 
TO_DATE('20250714', 'YYYY/MM/DD') AS 날짜1,
 TO_DATE('250714', 'YY-MM-DD') AS 날짜2,
 TO_DATE(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS 날짜시간
FROM DUAL;

//해당 문장만 치면됨
INSERT INTO EMP VALUES (1014, '유관순', 'F', '차장', 20, SYSDATE);// 같은결과인 이유는 환경설정으로 변경했기떄문(오라클 시간 자체를)
 
//NVL, NVL2 NULL 체크함수
SELECT NO, EMPNO, YEAR, MONTH, NVL(PRICE,0) FROM SALE; --PRICE가 NULL 이면 0으로 치환해서 보여줌

SELECT EMPNO, NAME, GENDER, JOB, NVL2(DEPNO,'정규직','비정규직') FROM EMP; -- DEPNO가 NULL 인지 아닌지 확인 후 NULL 이면 비정규직으로 표현

--실습 4-1
SELECT EMPNO FROM SALE GROUP BY EMPNO;
SELECT YEAR FROM SALE GROUP BY YEAR;
SELECT EMPNO, YEAR FROM SALE GROUP BY EMPNO, YEAR;
SELECT * FROM SALE;

SELECT EMPNO, COUNT(*) AS 판매건수 FROM SALE GROUP BY EMPNO;
SELECT EMPNO, SUM(PRICE) AS 합계 FROM SALE GROUP BY EMPNO; --매출 테이블에서 각 직원별 PRICE 합

SELECT EMPNO, YEAR, SUM(price) AS 합계
FROM SALE
GROUP BY EMPNO,YEAR;

SELECT EMPNO, YEAR, SUM(price) AS 합계
FROM SALE
WHERE PRICE >= 50000
GROUP BY EMPNO, YEAR -- 두개를 그룹으로 묶어서 결과 표시
ORDER BY YEAR ASC, 합계 DESC; --연도는 내림차순 합계는 오름차순으로 정리해서 결과


--실습 4-2 그룹화 조건 실습

SELECT empno, year, sum(price) as 합계
    FROM SALE
    WHERE PRICE>=50000
    GROUP BY EMPNO,YEAR
    HAVING sum(price) >= 200000 -- having 에서 (별칭)합계가 안됨.. 그래서 원문으로 선언
    ORDER BY 합계 DESC;
    
--실습 5-1 
//중복을 빼고 출력
SELECT EMPNO, MONTH, PRICE FROM SALE WHERE YEAR = 2023
 UNION
 SELECT EMPNO, MONTH, PRICE FROM SALE WHERE YEAR = 2024;
 
 //중복 제거하지않고 출력
 SELECT EMPNO, MONTH, PRICE FROM SALE WHERE YEAR = 2023
 UNION ALL
 SELECT EMPNO, MONTH, PRICE FROM SALE WHERE YEAR = 2024;
 
 SELECT EMPNO,YEAR,SUM(PRICE)AS 합계
 FROM SALE
 WHERE YEAR=2023
 GROUP BY EMPNO, YEAR
 UNION
 SELECT EMPNO, YEAR, SUM(PRICE) AS 합계
 FROM SALE
 WHERE YEAR = 2024
 GROUP BY EMPNO, YEAR
 ORDER BY YEAR ASC, 합계 DESC;
 
 --교집합(같은거) 2023,2024년도에 있는 직원
 SELECT EMPNO FROM SALE WHERE YEAR = 2023
 INTERSECT
 SELECT EMPNO FROM SALE WHERE YEAR = 2024;
 
 -- 차집합 왼쪽이 기준
  SELECT EMPNO FROM SALE WHERE YEAR = 2023
 MINUS
 SELECT EMPNO FROM SALE WHERE YEAR = 2024;
 
 --실습하기 SQL JOIN 
 
 
 SELECT * FROM EMP E JOIN DEPT D ON E.DEPNO = D.DEPTNO;
 
 SELECT * FROM EMP E JOIN DEPT D USING (DEPTNO); //현재 테이블 컬럼병이 다름(오타로)
 
 SELECT * FROM EMP E, DEPT D WHERE E.DEPNO = D.DEPTNO; //해당 코드가 조금 더 깔금해서 자주 사용함
 
 
SELECT
S.NO,
S.EMPNO,
E.NAME,
E.JOB,
E.REGDATE,
E.DEPNO,
D.DNAME
 FROM SALE S
 JOIN EMP E ON S.EMPNO = E.EMPNO
 JOIN DEPT D ON E.DEPNO = D.DEPTNO
 WHERE PRICE > 100000 AND YEAR = 2024
 ORDER BY S.PRICE;
 
 SELECT S.NO, S.EMPNO, E.NAME, E.JOB, E.REGDATE, D.DNAME
 FROM SALE S
 JOIN EMP E ON S.EMPNO = E.EMPNO
 JOIN DEPT D ON E.DEPNO = D.DEPTNO
 WHERE PRICE > 100000 AND YEAR = 2024;
 
 --실습 6-2 NULL 값인 데이터들도 같이 조회됨
 SELECT * 
    FROM SALE S
    LEFT JOIN EMP E ON S.EMPNO = E.EMPNO;
    

    
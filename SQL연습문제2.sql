/*
    날짜 : 2025/07/21
    이름 : 박효빈
    내용 : SQL 2주차 연습문제 2

*/

-- 실습 2-1
ALTER SESSION SET "_ORACLE_SCRIPT"=true;
CREATE USER collage IDENTIFIED BY 1234;
GRANT CONNECT, RESOURCE, UNLIMITED TABLESPACE TO collage;
exit;




-- 실습 2-2
CREATE TABLE student (
stdNo CHAR(8) PRIMARY KEY,
NAME VARCHAR(20) NOT NULL,
BIRTH DATE NOT NULL,
MOJOR VARCHAR(20) DEFAULT NULL,
ENR_DATE DATE NOT NULL
);

CREATE TABLE COURSE (
CS_ID CHAR(4) PRIMARY KEY,
CS_NAME VARCHAR(20) NOT NULL,
CS_CREDIT CHAR(1) NOT NULL,
CS_DEPT VARCHAR(20) NOT NULL
);
ALTER TABLE COURSE
MODIFY CS_NAME VARCHAR(25);
CREATE TABLE ENROLLMENT (
ENR_NO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
ENR_STDNO VARCHAR(8) NOT NULL,
ENR_CSID NUMBER(4) DEFAULT NULL,
MID_SCORE NUMBER DEFAULT NULL,
FINAL_SCORE NUMBER DEFAULT NULL,
TOTAL_SCORE NUMBER DEFAULT NULL,
GRADE VARCHAR(1) DEFAULT NULL
);
-- 실습 2-3
INSERT INTO STUDENT VALUES('20121016','김유신','1991-01-13','국문학과','2012-02-01');
INSERT INTO STUDENT VALUES('20121126','김춘추','1992-04-11','경제학과','2011-02-01');
INSERT INTO STUDENT VALUES('20100216','장보고','1991-05-23','컴퓨터학과','2010-02-01');
INSERT INTO STUDENT VALUES('20120326','강감찬','1991-02-09','영문학과','2012-02-01');
INSERT INTO STUDENT VALUES('20130416','이순신','1991-11-30','경영학과','2012-02-01');
INSERT INTO STUDENT VALUES('20110521','송상현','1992-07-17','컴퓨터학과','2011-02-01');

INSERT INTO COURSE VALUES('1059','고전문학','3','국문학과');
INSERT INTO COURSE VALUES('2312','데이터베이스','3','컴퓨터학과');
INSERT INTO COURSE VALUES('1203','EasyWriting','3','영문학과');
INSERT INTO COURSE VALUES('2039','글로벌경제학','3','경제학과');
INSERT INTO COURSE VALUES('2301','프로그래밍언어','3','컴퓨터학과');
INSERT INTO COURSE VALUES('2303','컴퓨터과학개론','2','컴퓨터학과');
INSERT INTO COURSE VALUES('3012','마케팅 전략','2','경영학과');

INSERT INTO ENROLLMENT (ENR_NO,ENR_STDNO,ENR_CSID) VALUES('1','20111126','1203');

INSERT INTO ENROLLMENT (ENR_NO,ENR_STDNO,ENR_CSID) VALUES('2','20121016','2301');
INSERT INTO ENROLLMENT (ENR_NO,ENR_STDNO,ENR_CSID) VALUES('3','20121016','2303');
INSERT INTO ENROLLMENT (ENR_NO,ENR_STDNO,ENR_CSID) VALUES('4','20111126','2039');
INSERT INTO ENROLLMENT (ENR_NO,ENR_STDNO,ENR_CSID) VALUES('5','20100216','3012');
INSERT INTO ENROLLMENT (ENR_NO,ENR_STDNO,ENR_CSID) VALUES('6','20120326','3012');
INSERT INTO ENROLLMENT (ENR_NO,ENR_STDNO,ENR_CSID) VALUES('7','20121016','2312');
INSERT INTO ENROLLMENT (ENR_NO,ENR_STDNO,ENR_CSID) VALUES('8','20130416','3012');

-- 실습 2-4
SELECT * FROM STUDENT WHERE MAJOR = '컴퓨터학과';
-- 실습 2-5
SELECT * FROM COURSE WHERE CS_DEPT='컴퓨터학과';
-- 실습 2-6
SELECT * FROM ENROLLMENT WHERE ENR_STDNO='20121016';
-- 실습 2-7
SELECT NAME, MAJOR, ENR_DATE FROM STUDENT WHERE MAJOR = '국문학과';
-- 실습 2-8
SELECT * FROM COURSE WHERE CS_DEPT = '컴퓨터학과' AND CS_CREDIT =2;
-- 실습 2-9
SELECT STDNO, NAME, BIRTH FROM STUDENT WHERE BIRTH >= '1992-01-01';
-- 실습 2-10
UPDATE ENROLLMENT SET MID_SCORE=36, FINAL_SCORE=42  WHERE ENR_STDNO='20111126' AND ENR_CSID=1203;

UPDATE ENROLLMENT SET MID_SCORE=24, FINAL_SCORE=62  WHERE ENR_STDNO='20121016' AND ENR_CSID=2301;
UPDATE ENROLLMENT SET MID_SCORE=28, FINAL_SCORE=40  WHERE ENR_STDNO='20121016' AND ENR_CSID=2303;
UPDATE ENROLLMENT SET MID_SCORE=37, FINAL_SCORE=57  WHERE ENR_STDNO='20111126' AND ENR_CSID=2039;
UPDATE ENROLLMENT SET MID_SCORE=28, FINAL_SCORE=68  WHERE ENR_STDNO='20100216' AND ENR_CSID=3012;
UPDATE ENROLLMENT SET MID_SCORE=16, FINAL_SCORE=65  WHERE ENR_STDNO='20120326' AND ENR_CSID=3012;
UPDATE ENROLLMENT SET MID_SCORE=18, FINAL_SCORE=38  WHERE ENR_STDNO='20121016' AND ENR_CSID=2312;
UPDATE ENROLLMENT SET MID_SCORE=25, FINAL_SCORE=58  WHERE ENR_STDNO='20130416' AND ENR_CSID=3012;


SELECT * FROM ENROLLMENT;
-- 실습 2-11

UPDATE ENROLLMENT SET TOTAL_SCORE = MID_SCORE + FINAL_SCORE, GRADE = CASE 
WHEN (MID_SCORE + FINAL_SCORE) >= 90 THEN 'A'
WHEN (MID_SCORE + FINAL_SCORE) >= 80 THEN 'B'
WHEN (MID_SCORE + FINAL_SCORE) >= 70 THEN 'C'
WHEN (MID_SCORE + FINAL_SCORE) >= 60 THEN 'D'
ELSE 'F'
END;

SELECT * FROM ENROLLMENT;

-- 실습 2-12

SELECT * FROM ENROLLMENT ORDER BY TOTAL_SCORE DESC;
-- 실습 2-13
SELECT * FROM ENROLLMENT WHERE ENR_CSID = '3012' ORDER BY TOTAL_SCORE DESC;
-- 실습 2-14
SELECT CS_ID, CS_NAME FROM COURSE WHERE CS_NAME = '데이터베이스' OR CS_NAME = '프로그래밍언어';
-- 실습 2-15
SELECT CS_NAME, CS_DEPT FROM COURSE;
-- 실습 2-16
SELECT STDNO,NAME FROM STUDENT ORDER BY NAME ASC;
-- 실습 2-17
SELECT DISTINCT ENR_STDNO FROM ENROLLMENT;
-- 실습 2-18
SELECT MAX(TOTAL_SCORE) AS "가장_큰_총점" FROM ENROLLMENT;
-- 실습 2-19
SELECT MAJOR, COUNT(MAJOR) AS "학생수" FROM STUDENT GROUP BY MAJOR;
-- 실습 2-20
SELECT ENR_CSID, COUNT(ENR_CSID) AS "수강 학생수" FROM ENROLLMENT GROUP BY ENR_CSID HAVING COUNT(ENR_CSID)>2;
SELECT ENR_CSID, COUNT(*) AS "수강 학생수" FROM ENROLLMENT GROUP BY ENR_CSID HAVING COUNT(*)>2;

-- 실습 2-21
SELECT STDNO, NAME, MAJOR, ENR_CSID, MID_SCORE,FINAL_SCORE, TOTAL_SCORE,GRADE 
FROM STUDENT S LEFT OUTER JOIN ENROLLMENT E
ON S.STDNO = E.ENR_STDNO; //LEFT OUTTER JOIN 사용 , 공백인 테이블도 같이 합친다.
-- 실습 2-22
SELECT NAME, STDNO, ENR_CSID
FROM STUDENT S JOIN ENROLLMENT E
ON S.STDNO = E.ENR_STDNO
WHERE ENR_CSID ='3012';
-- 실습 2-23
SELECT STDNO, NAME, COUNT(STDNO) AS "수강신청건수", SUM(TOTAL_SCORE) AS 종합점수, SUM(TOTAL_SCORE)/COUNT(STDNO) AS 평균
FROM STUDENT S
JOIN ENROLLMENT E 
ON S.STDNO = E.ENR_STDNO
GROUP BY STDNO, NAME;
--HAVING SUM(TOTAL_SCORE)/COUNT(STDNO) > 80;

-- 실습 2-24
SELECT ENR_NO, ENR_STDNO, CS_ID, CS_NAME,CS_CREDIT FROM ENROLLMENT E
JOIN COURSE C
ON E.ENR_CSID = C.CS_ID
-- 실습 2-25

SELECT COUNT(*) AS "마케팅_전략_수강_신청건수", 
AVG(TOTAL_SCORE) AS "마케팅_전략_평균"
FROM ENROLLMENT E
JOIN COURSE C
ON E.ENR_CSID = C.CS_ID
WHERE E.ENR_CSID = '3012';

-- 실습 2-26
SELECT ENR_STDNO, CS_NAME
FROM ENROLLMENT E
JOIN COURSE C
ON E.ENR_CSID = C.CS_ID
WHERE E.GRADE = 'A';

-- 실습 2-27

SELECT STDNO, NAME, MAJOR, ENR_CSID, CS_NAME, CS_CREDIT, TOTAL_SCORE, GRADE
FROM STUDENT S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = C.CS_ID;
-- 실습 2-28
SELECT STDNO, NAME, CS_NAME,TOTAL_SCORE, GRADE
FROM STUDENT S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = C.CS_ID
WHERE E.GRADE = 'F';

-- 실습 2-29
SELECT STDNO, NAME, SUM(CS_CREDIT) AS "이수학점"
FROM STUDENT S
JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
JOIN COURSE C ON E.ENR_CSID = C.CS_ID
WHERE E.GRADE != 'F'
GROUP BY STDNO, NAME
ORDER BY SUM(CS_CREDIT) DESC;

-- 실습 2-30 //서브 쿼리 -> SELECT 안에 SELECT가 포함된것
SELECT 
S.STDNO, S.NAME, S.MAJOR
FROM STUDENT S
WHERE S.STDNO NOT IN (
    SELECT ENR_STDNO FROM ENROLLMENT/*해당 SELECT가 먼저 실행 된다 해당 SELECT에서 선택 되지 않은 */
    );
    //수강 신청지않은 학생을 찾는 것 앞의 NOT IN (포함되지않는것)

SELECT STDNO, NAME, MAJOR
FROM STUDENT S
LEFT OUTER JOIN ENROLLMENT E ON S.STDNO = E.ENR_STDNO
WHERE E.ENR_STDNO IS NULL;
// NULL 값인 테이블을 조회 후, WHERE 문으로 E.ENR_STDNO에서 NULL 인 테이블 추출 끝